#pragma config(Motor,  port10,           intake1,     tmotorVex393, openLoop, reversed)//good
#pragma config(Motor, port1,           hDrive,     tmotorVex393, openLoop)//good
#pragma config(Motor,  port2,           backLeft,      tmotorVex393, openLoop)//good
#pragma config(Motor,  port3,           backRight,     tmotorVex393, openLoop, reversed)//good
#pragma config(Motor,  port6,           frontLeft,          tmotorVex393, openLoop)//good
#pragma config(Motor,  port7,           frontRight,    tmotorVex393, openLoop, reversed)//good
#pragma config(Motor,  port4,           leftLiftTop, tmotorVex393, openLoop, reversed)//good
#pragma config(Motor,  port5,           rightLiftBottom, tmotorVex393, openLoop)//good
#pragma config(Motor,  port8,           leftLiftBottom,  tmotorVex393, openLoop, reversed)//good
#pragma config(Motor,  port9,           rightLiftTop, tmotorVex393, openLoop)//good
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{

	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous(){
	motor [intake1] = -127;
	motor [rightLiftTop] = -127;
	motor [rightLiftBottom] = -127;
	motor [leftLiftBottom] = -127;
	motor [leftLiftTop] = -127;
		wait1Msec (600);
		motor [intake1] = 0;
		wait1Msec (1);
	motor [frontLeft] = 127;
	motor [frontRight] = 127;
	motor [backLeft] = 127;
	motor [backRight] = 127;
		wait1Msec (1000);
	motor [frontLeft] = 0;
	motor [frontRight] = 0;
	motor [backLeft] = 0;
	motor [backRight] = 0;
		wait1Msec (1);
	motor [intake1] = -127;
		wait1Msec (1250);
	motor [intake1] = 0;
		wait1Msec (1);
	motor [hDrive] = -100;
		wait1Msec(3000);
	motor [hDrive] = 0;
		wait1Msec(1);
	motor [frontLeft] = 127;
	motor [frontRight] = -127;
	motor [backLeft] = 127;
	motor [backRight] = -127;
		wait1Msec (800);
	motor [frontLeft] = 0;
	motor [frontRight] = 0;
	motor [backLeft] = 0;
	motor [backRight] = 0;
		wait1Msec (1);
	motor [hDrive] = -100;
		wait1Msec(3000);
	motor [hDrive] = 0;
		wait1Msec(1);
	motor [rightLiftTop] = 0;
	motor [rightLiftBottom] = 0;
	motor [leftLiftBottom] = 0;
	motor [leftLiftTop] = 0;
		wait1Msec (1);
	motor [rightLiftTop] = 127;
	motor [rightLiftBottom] = 127;
	motor [leftLiftBottom] = 127;
	motor [leftLiftTop] = 127;
		wait1Msec (1500);
	motor [intake1] = 127;
		wait1Msec (3000);
	motor [intake1] = 0;
		wait1Msec (1);
}
///////////////////////////////////DO NOT TOUCH//////////////////////////////////////////
void driveArcade(int y, int x)
{
	motor[frontLeft] = motor[backLeft] = y - x;
	motor[frontRight] = motor[backRight] = y + x;
}
void setLiftSpeed(int y, int x)
{
	motor[rightLiftTop] = motor[rightLiftBottom] = y + x;
	motor[leftLiftTop] = motor[leftLiftBottom] = y - x;
}
void setIntake(int y, int x)
{
	motor[intake1] = (y-x)*127;
}
void setHDrive (int y, int x)
{
	motor[hDrive] = (y-x)*127;
}
/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop
	// for sensor use SensorValue[nameofsensor(i.e. Pot)]
	while (true)
	{
		int driveX = vexRT[Ch4];
		int driveY = vexRT[Ch3] ;
		int liftSpeed = vexRT[Ch2];
		int liftCorrection = vexRT[Ch1];
    int deposit = vexRT[Btn6U];
		int intake = vexRT[Btn6D];
		int right = vexRT[Btn7R];
		int left = vexRT[Btn7L];
		//SensorValue[PotR];
		//SensorValue[PotL];
		if(liftSpeed > 5 || liftSpeed < -5){
			liftSpeed = liftSpeed;
		}
		else{
			liftSpeed = 15;
		}
		driveArcade(driveY * 100 / 128, driveX * -100 / 128);
		setLiftSpeed(liftSpeed*127/128, liftCorrection*0/128);
	  setIntake(deposit, intake);
	  setHDrive(right, left);
	}
}
