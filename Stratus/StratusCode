#pragma config(Sensor, in1,    PotR,           sensorPotentiometer)
#pragma config(Sensor, in2,    PotL,           sensorPotentiometer)
#pragma config(Sensor, dgtl9,  sonarSensor,    sensorSONAR_cm)
#pragma config(Motor,  port1,           frontLeft,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port2,           frontRight,    tmotorVex393, openLoop)
#pragma config(Motor,  port3,           backRight,     tmotorVex393, openLoop)
#pragma config(Motor,  port4,           backLeft,      tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port5,           rightFrontLift, tmotorVex393, openLoop)
#pragma config(Motor,  port6,           rightBackLift, tmotorVex393, openLoop)
#pragma config(Motor,  port7,           leftFrontLift, tmotorVex393, openLoop)
#pragma config(Motor,  port8,           leftBackLift,  tmotorVex393, openLoop)
#pragma config(Motor,  port9,           claw,          tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)
//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)
#include "Vex_Competition_Includes.c" //Main competition background code...do not modify!
/////////////////////////////////////////////////////////////////////////////////////////
//
// Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////
void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;
	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}
/////////////////////////////////////////////////////////////////////////////////////////
//
// Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////
task autonomous()
{
	// .....................................................................................
	// Insert user code here.
	// .....................................................................................
while(SensorValue(sonarSensor)> 10 ||SensorValue(sonarSensor) == -1)
{
	motor[backLeft] = 127;
  motor[backRight] = 127;
  motor[frontLeft] = 127;
  motor[frontRight] = 127;
}
	motor[backLeft] = 0;
  motor[backRight] = 0;
  motor[frontLeft] = 0;
  motor[frontRight] = 0;
  //wait10Msec(1000);
	// AutonomousCodePlaceholderForTesting(); // Remove this function call once you have "real" code.
}
#define PID_SENSOR_INDEX    myEncoder
#define PID_SENSOR_SCALE    1

#define PID_MOTOR_INDEX     myMotor
#define PID_MOTOR_SCALE     -1

#define PID_DRIVE_MAX       127
#define PID_DRIVE_MIN     (-127)

#define PID_INTEGRAL_LIMIT  50

// These could be constants but leaving
// as variables allows them to be modified in the debugger "live"
float  pid_Kp = 2.0;
float  pid_Ki = 0.04;
float  pid_Kd = 0.0;

static int   pidRunning = 1;
static float pidRequestedValue;

/*-----------------------------------------------------------------------------*/
/*                                                                             */
/*  pid control task                                                           */
/*                                                                             */
/*-----------------------------------------------------------------------------*/

task pidController()
{
    float  pidSensorCurrentValue;

    float  pidError;
    float  pidLastError;
    float  pidIntegral;
    float  pidDerivative;
    float  pidDrive;

    // If we are using an encoder then clear it
    if( SensorType[ PID_SENSOR_INDEX ] == sensorPotentiometer )
        SensorValue[ PID_SENSOR_INDEX ] = 0;

    // Init the variables - thanks Glenn :)
    pidLastError  = 0;
    pidIntegral   = 0;

    while( true )
        {
        // Is PID control active ?
        if( pidRunning )
            {
            // Read the sensor value and scale
            pidSensorCurrentValue = SensorValue[ PID_SENSOR_INDEX ] * PID_SENSOR_SCALE;

            // calculate error
            pidError = pidSensorCurrentValue - pidRequestedValue;

            // integral - if Ki is not 0
            if( pid_Ki != 0 )
                {
                // If we are inside controlable window then integrate the error
                if( abs(pidError) < PID_INTEGRAL_LIMIT )
                    pidIntegral = pidIntegral + pidError;
                else
                    pidIntegral = 0;
                }
            else
                pidIntegral = 0;

            // calculate the derivative
            pidDerivative = pidError - pidLastError;
            pidLastError  = pidError;

            // calculate drive
            pidDrive = (pid_Kp * pidError) + (pid_Ki * pidIntegral) + (pid_Kd * pidDerivative);

            // limit drive
            if( pidDrive > PID_DRIVE_MAX )
                pidDrive = PID_DRIVE_MAX;
            if( pidDrive < PID_DRIVE_MIN )
                pidDrive = PID_DRIVE_MIN;

            // send to motor
            motor[ PID_MOTOR_INDEX ] = pidDrive * PID_MOTOR_SCALE;
            }
        else
            {
            // clear all
            pidError      = 0;
            pidLastError  = 0;
            pidIntegral   = 0;
            pidDerivative = 0;
            motor[ PID_MOTOR_INDEX ] = 0;
            }

        // Run at 50Hz
        wait1Msec( 25 );
        }
}

/*-----------------------------------------------------------------------------*/
/*                                                                             */
/*  main task                                                                  */
/*                                                                             */
/*-----------------------------------------------------------------------------*/
void driveArcade(int y, int x)
{
	motor[frontLeft] = motor[backLeft] = y + x;
	motor[frontRight] = motor[backRight] = -y + x;
}
void setLiftSpeed(int y, int x)
{
	motor[rightFrontLift] = motor[rightBackLift] = y + x;
	motor[leftFrontLift] = motor[leftBackLift] = y - x;
}
void setClaw(int y, int x)
{
	motor[claw] = (y-x)*127;
}
/////////////////////////////////////////////////////////////////////////////////////////
//
// User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////


task usercontrol()
{
	// User control code here, inside the loop
	// for sensor use SensorValue[nameofsensor(i.e. Pot)]
	while (true)
	{
		int driveX = vexRT[Ch3];
		int driveY = vexRT[Ch4] ;
		int liftSpeed = vexRT[Ch2];
		int liftCorrection = vexRT[Ch1];
		int open = vexRT[Btn6U];
		int close = vexRT[Btn6D];
		SensorValue[PotR];
		SensorValue[PotL];
		driveArcade(driveY * 100 / 128, driveX * 100 / 128);
		setLiftSpeed(liftSpeed*100/128, liftCorrection*64/128);
		setClaw(open, close);
		//motor[LeftRear]=vexRT[Btn6D]-vexRT[Btn6U]+vexRT[Ch4];
		//motor[LeftFront]=vexRT[Btn6D]-vexRT[Btn6U]+vexRT[Ch4]];
		//motor[RightFront]=vexRT[Btn6D]-vexRT[Btn6U]+vexRT[Ch1];
		//motor[RightRear]=vexRT[Btn6D]-vexRT[Btn6U]+vexRT[Ch1];
		//motor[RightArmLower]=vexRT[Ch2]-vexRT[Ch3];
		//motor[RightArmUpper]=vexRT[Ch2]-vexRT[Ch3];
		//motor[LeftArmLower]=vexRT[Ch2]-vexRT[Ch3];
		//motor[LeftArmUpper]=vexRT[Ch2]-vexRT[Ch3];
		//UserControlCodePlaceholderForTesting(); // Remove this function call once you have "real" code.
	}
}
